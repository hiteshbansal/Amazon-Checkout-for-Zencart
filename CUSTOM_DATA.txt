CUSTOM DATA MODULE - CHECKOUT BY AMAZON PLUGIN v1.0 FOR ZEN CART 1.3.9e
Author: Balachandar Muruganantham
Copyright: 2007-2010 Amazon Technologies, Inc
-----------------------------------------------
CONTENT SECTIONS (in order of appearance)
-----------------------------------------------
	INTRODUCTION
	HOW TO WRITE MY OWN CUSTOM DATA INTO ORDER XML
	LINKS
-----------------------------------------------
INTRODUCTION
-----------------------------------------------
Using Custom Data, you can send your own data definitions and data fields in the order XML feeds. Depending on your needs, you can modify the Order XML feed you send us. The response feeds we send to you (the Callback Request XML and the Instant Order Processing Notification XML) are modified as well to include the Custom Data you had sent in the original order XML. You can use this data while processing/managing the order and/or for reporting/metrics generation purposes.

Custom data can be sent at the order level and also at the order item (product) level. In order to enable you to include Custom Data for CBA orders placed through your website, we have written pluggable modules. Please continue reading to know how to do this.

---------------------------------------------------------
HOW TO INCLUDE MY OWN CUSTOM DATA INTO ORDER XML
---------------------------------------------------------

	Custom data modules for CBA are located under checkout_by_amazon/modules/custom_data/ directory.

	This directory contains two sub-directories namely 'cart' and 'item'

	'cart' folder contains modules which are included in the <CartCustomData> XML (Order Level Custom Data)
	'item' folder contains modules which are included in the <ItemCustomData> XML (Product/Item Level Custom Data)

	Writing CartCustomData module:
	-------------------------------

	Please ensure that you follow the conditions below while writing a module to send cart level custom data
		1. The class name for every module should be same as that of a filename.
		2. This class should contain a method / function called "custom_data".
		3. Please include the data which are not item centric. For e.g. customer ip address

	Note: In the Cart Custom Data module, you can access all variables from Zen Cart via the 'global' keyword.
	
		Sample CartCustomData module - MerchantData.php to send details about customer ip address and Serialized session cart in order XML

		  class MerchantData {

			/* 
			 * @brief constrcutor
			 */
		    function MerchantData() {

			}

			/* 
			 * @brief custom data is called in button generator 
			 * @return associative array 
			 */

		    function custom_data() {		
			
			  $test_array = array("customer_ip_address" => $_SERVER['REMOTE_ADDR'], "cart" => serialize($_SESSION['cart']));

			  return $test_array;
		    }

		  }

		Sample Order XML generated with customer IP Address and Serialized cart from session ($_SESSION['Cart'])
				......
			       </Item>
			    </Items>
			    <CartCustomData>
			      <MerchantData>
				<Customer_ip_address>10.0.76.54</Customer_ip_address>

				<Cart>O:12:&quot;shoppingCart&quot;:9:{s:8:&quot;contents&quot;;a:1:{i:9;a:1:{s:3:&quot;qty&quot;;d:1;}}s:5:&quot;total&quot;;d:29.989999999999998436805981327779591083526611328125;s:6:&quot;weight&quot;;d:7;s:6:&quot;cartID&quot;;s:5:&quot;87091&quot;;s:12:&quot;content_type&quot;;b:0;s:18:&quot;free_shipping_item&quot;;i:0;s:20:&quot;free_shipping_weight&quot;;i:0;s:19:&quot;free_shipping_price&quot;;i:0;s:9:&quot;observers&quot;;a:0:{}}</Cart>

			      </MerchantData>
			    </CartCustomData>
			  </Cart>
			  ......


		Sample Callback XML received with the customer IP  Address and Serialized cart which are sent in Order XML.

			      ......
			      </Item></CallbackOrderCartItem></CallbackOrderCartItems><CartCustomData>
			      <MerchantData>
				<Customer_ip_address>10.0.76.54</Customer_ip_address>
				<Cart>O:12:"shoppingCart":9:{s:8:"contents";a:1:{i:9;a:1:{s:3:"qty";d:1;}}s:5:"total";d:29.989999999999998436805981327779591083526611328125;s:6:"weight";d:7;s:6:"cartID";s:5:"87091";s:12:"content_type";b:0;s:18:"free_shipping_item";i:0;s:20:"free_shipping_weight";i:0;s:19:"free_shipping_price";i:0;s:9:"observers";a:0:{}}</Cart>
			      </MerchantData>
			    </CartCustomData></CallbackOrderCart>
			    ......

		Sample IOPN XML received with the customer IP  Address and Serialized cart which are sent in IOPN XML.
			    ......
                        </Charge>
                    </Component>
                </ItemCharges>
                <CartCustomData>
                    <MerchantData>
                        <Customer_ip_address>10.0.76.54</Customer_ip_address>
                        <Cart>O:12:"shoppingCart":9:{s:8:"contents";a:1:{i:9;a:1:{s:3:"qty";d:1;}}s:5:"total";d:29.989999999999998436805981327779591083526611328125;s:6:"weight";d:7;s:6:"cartID";s:5:"39558";s:12:"content_type";b:0;s:18:"free_shipping_item";i:0;s:20:"free_shipping_weight";i:0;s:19:"free_shipping_price";i:0;s:9:"observers";a:0:{}}</Cart>
                    </MerchantData>
                </CartCustomData>
            </ProcessedOrderItem>
			    ......	

	Writing ItemCustomData module:
	-------------------------------

	Please ensure that you follow the conditions below while writing a module to send Item / Product level custom data
		1. The class name for every module should be same as that of a filename.
		2. This class should contain a method / function called "custom_data" with $item as the argument. 
		3. Please include the data which are item centric. For e.g. simple Product attributes such as Model, Manufacturer etc

	Note: In the Cart Custom Data module, you can access all variables from Zen Cart via the 'global' keyword.
	
		Sample ItemCustomData module - ProductInfo.php to send details about Product Attributes such as Model, Manufacturer in order XML

			class ProductInfo {

				/* 
				 * @brief constrcutor
				 */
			    function ProductInfo() {
					
				}

				/* 
				 * @brief custom data is called in button generator 
				 * @param item -  item associative array passed from button generator
				 * @return associative array 
				 */
			    function custom_data($item) {
				   $custom_data = array();
				   $custom_data["model"] = $item[model];
				   $custom_data["manufacturer"] = zen_get_products_manufacturers_name((int)$item[id]);
				   return $custom_data;
				}

			}

		Sample Order XML generated with Product Attributes such as Model, Manufacturer
			   ......
					<FulfillmentNetwork>MERCHANT</FulfillmentNetwork>
				<ItemCustomData>
				  <ProductInfo>
				    <Model>DVD-UNSG</Model>
				    <Manufacturer>Warner</Manufacturer>
				  </ProductInfo>
				</ItemCustomData>
			      </Item>
			  ......

		Sample Callback XML received with Product Attributes such as Model, Manufacturer which are sent in Order XML.

			      ......
				<FulfillmentNetwork>MERCHANT</FulfillmentNetwork>
				<ItemCustomData>
				  <ProductInfo>
				    <Model>DVD-UNSG</Model>
				    <Manufacturer>Warner</Manufacturer>
				  </ProductInfo>
				</ItemCustomData>
			      </Item>
			      ......

		Sample IOPN XML received with Product Attributes such as Model, Manufacturer which are sent in Order XML.
			    ......
                        </Charge>
                    </Component>
                </ItemCharges>
                <ItemCustomData>
                    <ProductInfo>
                        <Model>DVD-UNSG</Model>
                        <Manufacturer>Warner</Manufacturer>
                    </ProductInfo>
                </ItemCustomData>
            </ProcessedOrderItem>
			    ......

-----------------------------------------------
LINKS and REFERENCES
-----------------------------------------------
	Using Custom Data Fields
		https://payments.amazon.com/sdui/sdui/about?nodeId=76330 
	Using Custom Data Fields PDF
		http://amazonpayments.s3.amazonaws.com/documents/Using_Custom_Data_Fields.pdf
